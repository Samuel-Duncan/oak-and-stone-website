extends layout

block stylesheets
  
  link(rel='stylesheet', href='/stylesheets/projectDetail.css')

block content
  .project-background
    .dashboard
      if errMsg
        h1= title
        p.error-message= errMsg
      else if projectDetail
        .project-header
          h1.main-title-font= projectDetail.address
          if currentUser && currentUser.isAdmin
            div.project-button-container
              a#viewProject.button.header-button.project-button(href=`/users/${projectDetail.userId}/project/${projectDetail._id}/update`) 
                span#button-text Edit
                span#spinner-border.spinner-border.spinner-border-sm.d-none(role='status' aria-hidden='true')
              a.button.header-button.project-button.delete-button(href=`/users/${projectDetail.userId}/project/${projectDetail._id}/delete`)
                svg(xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none" stroke="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16" stroke-width="1")
                  path(d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z" stroke-linecap="round" stroke-linejoin="round")
          
          if moreThanOneProject
            a#viewProject.button.header-button.project-button(href=`/users/${projectDetail.userId}/projects/`) 
              span#button-text Back
              span#spinner-border.spinner-border.spinner-border-sm.d-none(role='status' aria-hidden='true')


        // DETAILS
        .project-details
          if currentUser.isAdmin
            .detail-item
              h2.dashboard-header Client 
              p.secondary-text= userName
            if lastLogin
              .detail-item
                h2.dashboard-header Last Login 
                p.secondary-text= new Date(lastLogin).toLocaleString('en-US', { weekday: 'long', month: 'long', day: '2-digit', hour: 'numeric', minute: 'numeric', hour12: true })
          
          .detail-item
            h2.dashboard-header Phase
            .phase-items
              p.secondary-text #{projectDetail.phaseName}
          
          .detail-item
            h2.dashboard-header Completion Rate
            .phase-items
              p.secondary-text #{projectDetail.currentPhase}%
              div.progress(role='progressbar', aria-label='Progress', aria-valuenow=projectDetail.currentPhase, aria-valuemin='0', aria-valuemax='100')
                div.progress-bar(style=`width: ${projectDetail.currentPhase}%`, aria-valuenow=projectDetail.currentPhase, aria-valuemin='0', aria-valuemax='100')


          if currentUser && currentUser.isAdmin
            .detail-item
              h2.dashboard-header Type
              p.secondary-text= projectDetail.type
        
        // CURRENT UPDATE
        .updates-container
          .detail-item
            .updates-header
              h2.dashboard-header Current Update 
              if currentUser.isAdmin && update === null
                a.button.header-button.project-button(href=`/users/${projectDetail.userId}/project/${projectDetail._id}/weekly-update/create`)
                  svg(xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16")
                    path(d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4")
              else if currentUser.isAdmin && update !== null || !currentUser.isAdmin && update !== null
                a.button.header-button.project-button(href=`/users/${projectDetail.userId}/project/${projectDetail._id}/weekly-updates`) View All
            if update !== null
              p.secondary-text.subtitle.project-detail-subtitle Week #{update.week} - #{update.title}
              if update.description
                each line in update.description
                  p.update-description.secondary-text= line
            else
              p.secondary-text No updates to see yet.

        // FILES
        .updates-container 
          .detail-item 
            .updates-header 
              h2.dashboard-header Files 
              if currentUser && currentUser.isAdmin && projectDetail && projectDetail._id
                a.button.header-button.project-button(href=`/users/${projectDetail.userId}/project/${projectDetail._id}/file/create`)
                  svg(xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16")
                    path(d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4")
            if files && files.length > 0
              each file in files 
                if file && file.cloudinaryUrl && file.filename
                  div
                    a.user-list.text-wrap(href=`${file.cloudinaryUrl}` target="_blank")= file.filename
                    |  
                    if currentUser && currentUser.isAdmin && projectDetail && projectDetail._id && file && file._id
                      form(action=`/users/${projectDetail.userId}/project/${projectDetail._id}/file/${file._id}/delete` method="POST" style="display: inline;")
                        button#viewProject.button.header-button.project-button.file-button.delete-button.image-delete(type="submit") 
                          svg(xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none" stroke="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16" stroke-width="1")
                            path(d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z" stroke-linecap="round" stroke-linejoin="round")
                          span#spinner-border.spinner-border.spinner-border-sm.d-none(role='status' aria-hidden='true')
            else
              p.secondary-text No files to see yet.

        // IMAGES
        if images && images.length > 0
          .detail-item
            .updates-header
              h2.dashboard-header Pictures
              if currentUser.isAdmin
                a.button.header-button.project-button.add-button(href=`/users/${projectDetail.userId}/project/${projectDetail._id}/images`)
                  svg(xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16")
                      path(d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4")
            .image-gallery
              .gallery-grid
                each image in images
                  div.image-container(id=`image-container-${image._id}`)
                    div.image-preview(type="button" data-bs-toggle="modal" data-bs-target="#exampleModal" data-image-url=image.url data-image-id=image._id)
                      img.gallery-image(src=image.url alt="Project Image")
                      p.image-date #{image.createdAt.toLocaleDateString()}
                    if currentUser && currentUser.isAdmin
                      form.delete-image-button(action=`/users/${projectDetail.userId}/project/${projectDetail._id}/image/${image._id}/delete` method="POST")
                        button.button.header-button.project-button.file-button.delete-button.image-delete(type="submit")
                          svg(xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none" stroke="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16" stroke-width="1")
                            path(d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z" stroke-linecap="round" stroke-linejoin="round")

        else
          .detail-item
            .updates-header
                h2 Photos
                if currentUser.isAdmin
                  a.button.header-button.project-button(href=`/users/${projectDetail.userId}/project/${projectDetail._id}/images`)
                    svg(xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16")
                      path(d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4")
            p.secondary-text No images to see yet.

  if images && images.length > 0
    div#exampleModal.modal.fade(tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true")
      div.modal-dialog.modal-dialog-centered.modal-lg
        div.modal-content
          div.modal-header
            button.btn-close.btn-close-white(type="button" data-bs-dismiss="modal" aria-label="Close")
          div.modal-body.p-0
            div#imageCarousel.carousel.slide
              div.carousel-inner
                each image, index in images
                  div.carousel-item(class=index === 0 ? 'active' : '', data-image-id=image._id)
                    img.d-block.w-100(src=image.url alt="Project Image")
                    //- if image.createdAt
                    //-   div.carousel-caption
                    //-     p.image-date.mb-0 #{image.createdAt.toLocaleDateString()}
              button.carousel-control-prev(type="button" data-bs-target="#imageCarousel" data-bs-slide="prev")
                span.carousel-control-prev-icon.carousel-btn.bg-dark(aria-hidden="true")
                span.visually-hidden Previous
              button.carousel-control-next(type="button" data-bs-target="#imageCarousel" data-bs-slide="next")
                span.carousel-control-next-icon.carousel-btn.bg-dark(aria-hidden="true")
                span.visually-hidden Next
            // Comments Section
            div.image-comments-container
              div#comments-loading-spinner.text-center.d-none(role='status')
                span.spinner-border.spinner-border-sm
              div.comments-list
                // Comments will be loaded here by JavaScript
              form.comment-form(data-image-id="")
                // New wrapper for textarea and button
                div.comment-input-wrapper 
                  textarea.form-control.comment-input(name="text" placeholder="Add a comment..." rows="2" required)
                  button.button.header-button.project-button.comment-submit-btn(type="submit") Post

  script.
    const projectUserId = !{JSON.stringify(projectDetail.userId)};
    const projectId = !{JSON.stringify(projectDetail._id)};
    const currentUserId = !{currentUser && currentUser._id ? JSON.stringify(currentUser._id) : null};
    const currentUserIsAdmin = !{currentUser && currentUser.isAdmin ? JSON.stringify(currentUser.isAdmin) : false};

    document.addEventListener('DOMContentLoaded', function() {
      // Define myModalEl and imageCarousel at the very top of this block
      const myModalEl = document.getElementById('exampleModal');
      const imageCarousel = document.getElementById('imageCarousel'); 
      
      // Initialize Bootstrap Modal instance once
      const modalInstance = myModalEl ? new bootstrap.Modal(myModalEl) : null;

      let activeCommentLoadCall = null; // For tracking the latest loadComments call

      // console.log('[DOMContentLoaded] Initialized myModalEl:', myModalEl);
      // console.log('[DOMContentLoaded] Initialized imageCarousel:', imageCarousel);
      // console.log('[DOMContentLoaded] Initialized modalInstance:', modalInstance);

      // --- Moved from separate block ---
      const imagePreviews = document.querySelectorAll('.image-preview');
      // imageCarousel is now defined before use here
      const carouselInstance = imageCarousel ? new bootstrap.Carousel(imageCarousel, { interval: false }) : null;

      // No global flags needed for this simplified approach
      let g_clickedImageIndex = -1; // Only to help shown.bs.modal know if index 0 was the target
      
      imagePreviews.forEach((preview, index) => {
        preview.addEventListener('click', function(event) {
          event.preventDefault();
          g_clickedImageIndex = index; // Store the target index for shown.bs.modal
          
          // console.log('[imagePreview click] Clicked Index:', index);
          
          if (carouselInstance) {
            carouselInstance.to(index); // Command carousel to go to the clicked image's index
          }

          if (modalInstance) {
            modalInstance.show(); // Then show the modal
          } else {
            // console.error('[imagePreview click] modalInstance is not defined, cannot show modal.');
          }
        });
      });

      // Reset relevant states when modal is closed
      myModalEl.addEventListener('hidden.bs.modal', function () {
        // console.log('[hidden.bs.modal] Event Fired. Resetting state.');
        g_clickedImageIndex = -1;
        
        const commentsListElement = myModalEl.querySelector('.comments-list');
        if (commentsListElement) {
          commentsListElement.innerHTML = ''; // Clear comments
        }
        
        const commentForm = myModalEl.querySelector('.comment-form');
        if (commentForm) {
          commentForm.dataset.imageId = ''; // Clear form's image ID
          commentForm.querySelector('textarea[name="text"]').value = ''; // Clear textarea
        }

        if (carouselInstance) {
          // carouselInstance.to(0); // Optionally reset carousel to first slide
          // For now, let's not reset to 0, as the next click will dictate the slide.
          // The critical part is resetting our tracking variables and clearing content.
        }
        // Clear the URL hash
        history.replaceState(null, '', window.location.pathname + window.location.search);

        // Clear any lingering opacity classes from previous hide/show attempts if they exist
        const modalBody = myModalEl.querySelector('.modal-body');
        if (modalBody && modalBody.classList.contains('modal-content-loading')) {
            modalBody.classList.remove('modal-content-loading');
            modalBody.style.transition = 'none'; // Remove any lingering transition
            modalBody.style.opacity = '1'; // Ensure it's visible for next time
        }

      });
      // --- End Moved Code ---

      // Functions moved here for correct scope
      function formatTimestamp(isoString) {
        const date = new Date(isoString);
        return date.toLocaleString('en-US', {
          month: 'long', 
          day: 'numeric',
          hour: 'numeric',
          minute: 'numeric',
          hour12: true,
        });
      }

      function displayComment(comment, commentsListElement) {
        const commentItem = document.createElement('div');
        commentItem.classList.add('comment-item');
        commentItem.dataset.commentId = comment._id; // Add commentId for easy access

        const fullUserName = comment.userId && comment.userId.name ? comment.userId.name : 'User';
        const userName = fullUserName.split(' ')[0]; // Get only the first word
        const commentUser = document.createElement('p');
        commentUser.classList.add('comment-user');
        commentUser.textContent = userName;
        const commentText = document.createElement('p');
        commentText.classList.add('comment-text');
        commentText.textContent = comment.text;
        const commentTimestamp = document.createElement('p');
        commentTimestamp.classList.add('comment-timestamp', 'secondary-text');
        commentTimestamp.textContent = formatTimestamp(comment.createdAt);
        commentItem.appendChild(commentUser);
        commentItem.appendChild(commentText);
        commentItem.appendChild(commentTimestamp);

        // Add delete button if the comment belongs to the current user
        // Ensure comment.userId has _id, not just populated name. Adjust if backend sends full user object.
        // Assuming comment.userId is an object with _id or just the ID string.
        const commentOwnerId = comment.userId && typeof comment.userId === 'object' ? comment.userId._id : comment.userId;

        if (currentUserIsAdmin || (currentUserId && commentOwnerId && currentUserId === commentOwnerId.toString())) {
          const deleteButton = document.createElement('button');
          deleteButton.classList.add('button', 'header-button', 'project-button', 'file-button', 'delete-button', 'comment-delete-btn');
          deleteButton.setAttribute('type', 'button'); // Important: not a submit button
          deleteButton.dataset.commentId = comment._id;
          // We'll need imageId if it's not easily accessible from the form or modal data when deleting
          // Assuming imageId will be retrieved from the commentForm's dataset.imageId or similar context

          const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
          svg.setAttribute('width', '16');
          svg.setAttribute('height', '16');
          svg.setAttribute('fill', 'none');
          svg.setAttribute('stroke', 'currentColor');
          svg.setAttribute('class', 'bi bi-x-lg');
          svg.setAttribute('viewBox', '0 0 16 16');
          svg.setAttribute('stroke-width', '1');
          const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
          path.setAttribute('d', 'M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z');
          path.setAttribute('stroke-linecap', 'round');
          path.setAttribute('stroke-linejoin', 'round');
          svg.appendChild(path);
          deleteButton.appendChild(svg);

          commentItem.appendChild(deleteButton);
        }
        
        commentsListElement.appendChild(commentItem);
      }

      async function loadComments(imageId, commentsListElement) {
        // ALWAYS clear existing comments and messages at the very start
        if (commentsListElement) {
          commentsListElement.innerHTML = ''; 
        }

        const thisCallSymbol = Symbol();
        activeCommentLoadCall = thisCallSymbol;

        // console.log('[loadComments] Called with imageId:', imageId);
        
        const commentsSpinner = myModalEl.querySelector('#comments-loading-spinner');
        if (commentsSpinner) {
          commentsSpinner.classList.remove('d-none'); // Show spinner
        }

        if (!imageId) {
          // console.warn('[loadComments] No imageId provided.');
          if (commentsSpinner) {
            commentsSpinner.classList.add('d-none'); // Hide spinner if no imageId
          }
          commentsListElement.innerHTML = ''; // Ensure list is clear even if no imageId
          commentsListElement.innerHTML = '<p class="text-center secondary-text">No comments yet. Be the first to comment!</p>';
          requestAnimationFrame(() => updateModalBodyHeightForContent());
          return;
        }

        // Always clear existing comments at the start
        commentsListElement.innerHTML = '';

        try {
          // console.log(`[loadComments] Fetching comments for imageId: ${imageId}`);
          const response = await fetch(`/users/${projectUserId}/project/${projectId}/image/${imageId}/comments`);
          // console.log('[loadComments] Fetch response status:', response.status);
          if (!response.ok) {
            const errorData = await response.json().catch(() => ({ message: 'Failed to parse error JSON' }));
            // console.error('[loadComments] Error fetching comments:', errorData);
            throw new Error(errorData.message || 'Failed to load comments');
          }
          const comments = await response.json();
          // console.log('[loadComments] Received comments:', comments);

          if (activeCommentLoadCall !== thisCallSymbol) return; // Stale call, do not update DOM

          if (comments.length === 0) {
            // console.log('[loadComments] No comments found, displaying message.');
            commentsListElement.innerHTML = '<p class="text-center secondary-text">No comments yet. Be the first to comment!</p>';
          } else {
            // console.log(`[loadComments] Displaying ${comments.length} comments.`);
            comments.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
            comments.forEach(comment => displayComment(comment, commentsListElement));
          }
          // console.log('[loadComments] Requesting animation frame for height update.');
          requestAnimationFrame(() => updateModalBodyHeightForContent());
        } catch (error) {
          if (activeCommentLoadCall !== thisCallSymbol) return; // Stale call, do not update DOM
          // console.error('[loadComments] Catch block error:', error);
          commentsListElement.innerHTML = '<p class="text-center text-danger">Error loading comments.</p>';
          requestAnimationFrame(() => updateModalBodyHeightForContent());
        } finally {
          if (activeCommentLoadCall !== thisCallSymbol) return; // Stale call, do not update DOM
          if (commentsSpinner) {
            commentsSpinner.classList.add('d-none'); // Hide spinner
          }
        }
      }

      async function handleCommentSubmit(event) {
        event.preventDefault();
        const form = event.target;
        const imageId = form.dataset.imageId;
        const commentText = form.querySelector('textarea[name="text"]').value.trim();
        if (!commentText || !imageId) return;
        try {
          const response = await fetch(`/users/${projectUserId}/project/${projectId}/image/${imageId}/comment`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ text: commentText }),
          });
          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || 'Failed to post comment');
          }
          const newComment = await response.json();
          const commentsListElement = form.previousElementSibling;
          const noCommentsMessage = commentsListElement.querySelector('.secondary-text');
          if (noCommentsMessage && noCommentsMessage.textContent.includes('No comments yet')) {
              commentsListElement.innerHTML = '';
          }
          displayComment(newComment, commentsListElement);
          form.querySelector('textarea[name="text"]').value = '';
          requestAnimationFrame(() => updateModalBodyHeightForContent(true)); // Animate for new comment
        } catch (error) {
          // console.error('Error posting comment:', error);
        }
      }

      // All other modal logic including myModalEl, imageCarousel, etc. definitions and event listeners
      // updateModalBodyHeightForContent, setModalBodyHeight etc. are already within this DOMContentLoaded block

      const commentForm = myModalEl.querySelector('.comment-form');
      const commentsListElement = myModalEl.querySelector('.comments-list');

      // console.log('[DOMContentLoaded] myModalEl is:', myModalEl); // Log myModalEl after definition

      if (commentForm) {
        commentForm.addEventListener('submit', handleCommentSubmit);
      }

      if (!myModalEl || !imageCarousel) {
        // console.error('Modal or Image Carousel element not found.');
        return;
      }

      const modalBody = myModalEl.querySelector('.modal-body');

      if (!modalBody) {
        // console.error('Modal body not found.');
        return;
      }

      let currentSetModalBodyHeight = 0; // Renamed from currentImageHeight
      const SCRIPT_ANIMATION_DURATION_CSS = 'height 0.35s ease-in-out'; // Match your CSS
      const HEIGHT_UPDATE_THRESHOLD = 1; // Pixels threshold to prevent jitter

      // Function to calculate the target height of an image
      function calculateImageDisplayHeight(imageElement, containerWidth) {
        if (!imageElement.complete || imageElement.naturalHeight === 0) {
          return 0;
        }
        const naturalWidth = imageElement.naturalWidth;
        const naturalHeight = imageElement.naturalHeight;
        const viewportHeight = window.innerHeight;
        const maxHeightConstraint = 0.70 * viewportHeight;

        let displayWidth = naturalWidth;
        let displayHeight = naturalHeight;

        if (naturalWidth > containerWidth) {
          displayWidth = containerWidth;
          displayHeight = (naturalHeight / naturalWidth) * displayWidth;
        }
        if (displayHeight > maxHeightConstraint) {
          displayHeight = maxHeightConstraint;
        }
        return displayHeight;
      }

      // New function to calculate and update modal body height based on content
      function updateModalBodyHeightForContent(animate = true) {
          // console.log('[updateModalBodyHeightForContent] Called. Animate:', animate);
          const activeImageElement = imageCarousel.querySelector('.carousel-item.active img');
          const commentsContainer = myModalEl.querySelector('.image-comments-container');

          let imageHeight = 0;
          if (activeImageElement && activeImageElement.complete && activeImageElement.naturalHeight > 0) {
              imageHeight = activeImageElement.offsetHeight;
              // console.log('[updateModalBodyHeightForContent] Image Height (offsetHeight):', imageHeight);
          } else if (activeImageElement) {
               const containerWidth = modalBody.clientWidth;
               imageHeight = calculateImageDisplayHeight(activeImageElement, containerWidth);
               // console.log('[updateModalBodyHeightForContent] Image Height (calculatedDisplayHeight):', imageHeight);
          }

          const commentsHeight = commentsContainer ? commentsContainer.offsetHeight : 0;
          // console.log('[updateModalBodyHeightForContent] Comments Container Height (offsetHeight):', commentsHeight);

          const totalContentHeight = imageHeight + commentsHeight;
          // console.log('[updateModalBodyHeightForContent] Total Content Height (image + comments):', totalContentHeight);
          // console.log('[updateModalBodyHeightForContent] Current Set Modal Body Height (before update attempt):', currentSetModalBodyHeight);

           // Use a threshold to prevent height jittering on minor changes
           requestAnimationFrame(() => {
                if (Math.abs(totalContentHeight - currentSetModalBodyHeight) > HEIGHT_UPDATE_THRESHOLD || totalContentHeight === 0 && currentSetModalBodyHeight !== 0) {
                    // console.log('[updateModalBodyHeightForContent] Attempting to set new height via setModalBodyHeight.');
                    setModalBodyHeight(totalContentHeight, animate);
                } else {
                    // console.log('[updateModalBodyHeightForContent] New height change below threshold or same, not updating.');
                }
           });
      }


      // Centralized function to set modal body height
      function setModalBodyHeight(newHeight, animate) {
        // console.log(`[setModalBodyHeight] Called. New Height: ${newHeight}, Animate: ${animate}, Current Set Height: ${currentSetModalBodyHeight}`);
        if (newHeight <= 0 && currentSetModalBodyHeight === 0) {
            // console.log('[setModalBodyHeight] New height is 0 and current is 0, aborting.');
            return; // Don't set invalid or zero height if already zero
        }
        if (Math.abs(newHeight - currentSetModalBodyHeight) < HEIGHT_UPDATE_THRESHOLD && newHeight !== 0) {
            // console.log('[setModalBodyHeight] Height change below threshold, not setting.');
            return;
        }

        const computedTransition = getComputedStyle(modalBody).transition;

        if (animate) {
          // Ensure transition is enabled for animation
          if (modalBody.style.transition === 'none' || !computedTransition.includes('height') || computedTransition.includes('0s')) {
            modalBody.style.transition = SCRIPT_ANIMATION_DURATION_CSS;
            requestAnimationFrame(() => {
              modalBody.style.height = newHeight + 'px';
              currentSetModalBodyHeight = newHeight;
            });
          } else {
            modalBody.style.height = newHeight + 'px';
             currentSetModalBodyHeight = newHeight;
             // console.log('[setModalBodyHeight] Height set (animated branch):', newHeight);
          }
        } else {
          modalBody.style.transition = 'none';
          modalBody.style.height = newHeight + 'px';
          void modalBody.offsetHeight; // Force reflow to apply instant height change
          modalBody.style.transition = SCRIPT_ANIMATION_DURATION_CSS;
          currentSetModalBodyHeight = newHeight;
          // console.log('[setModalBodyHeight] Height set (non-animated branch):', newHeight);
        }
      }

      // console.log('[DOMContentLoaded] Attaching Bootstrap modal event listeners to:', myModalEl);
      myModalEl.addEventListener('show.bs.modal', function (event) {
        // console.log('[show.bs.modal] Event Fired! Target:', event.target, 'RelatedTarget:', event.relatedTarget);
      });

      myModalEl.addEventListener('shown.bs.modal', function () {
        // This listener ensures comments are loaded whenever the modal is shown.
        // It finds the currently active carousel item and loads comments for its image ID.
        // console.log('[shown.bs.modal] Event Fired. Loading comments for active image.');

        const currentActiveItem = imageCarousel.querySelector('.carousel-item.active');
        const imageId = currentActiveItem?.dataset.imageId;
        const commentsListElement = myModalEl.querySelector('.comments-list');
        const commentForm = myModalEl.querySelector('.comment-form');

        if (imageId && commentsListElement) {
          loadComments(imageId, commentsListElement);
          history.replaceState(null, '', `#image-${imageId}`);
        }
        if (commentForm && imageId) {
          commentForm.dataset.imageId = imageId;
        }
        if (imageId) {
          history.replaceState(null, '', `#image-${imageId}`);
        }

        requestAnimationFrame(() => updateModalBodyHeightForContent(false));

      });

      imageCarousel.addEventListener('slid.bs.carousel', function (event) {
        // console.log('[slid.bs.carousel] Event Fired. New active slide index:', event.to);
        modalBody.style.transition = SCRIPT_ANIMATION_DURATION_CSS;

        const activeCarouselItem = event.relatedTarget; // The carousel item that just became active
        const activeImageId = activeCarouselItem.dataset.imageId;
        const commentsListElement = myModalEl.querySelector('.comments-list');
        const commentForm = myModalEl.querySelector('.comment-form');

        if (activeImageId && commentsListElement) {
          loadComments(activeImageId, commentsListElement);
          history.replaceState(null, '', `#image-${activeImageId}`);
        }
        if (commentForm && activeImageId) {
          commentForm.dataset.imageId = activeImageId;
        }
        if (activeImageId) {
          history.replaceState(null, '', `#image-${activeImageId}`);
        }

        if (activeCarouselItem) {
            const updateOnImageLoad = () => requestAnimationFrame(() => updateModalBodyHeightForContent(true));
             const imgElement = activeCarouselItem.querySelector('img');
            if (imgElement && imgElement.complete) {
                updateOnImageLoad();
            } else if (imgElement) {
                imgElement.onload = updateOnImageLoad;
            } else {
                updateModalBodyHeightForContent(true);
            }
        }
         requestAnimationFrame(() => updateModalBodyHeightForContent(true));
      });

      window.addEventListener('resize', function () {
        if (myModalEl.classList.contains('show')) {
           requestAnimationFrame(() => updateModalBodyHeightForContent(false)); // Update height non-animated on resize
        }
      });

       // Initial setup on modal open (attaching handlers, etc.) remains mostly the same
       // The logic for loading comments and initial height is now in 'shown.bs.modal'

      // Event listener for deleting comments (using event delegation)
      const commentsContainer = myModalEl.querySelector('.image-comments-container');
      if (commentsContainer) {
        commentsContainer.addEventListener('click', async function(event) {
          const deleteButton = event.target.closest('.comment-delete-btn');
          if (!deleteButton) return; // Click was not on a delete button

          const commentItem = deleteButton.closest('.comment-item');
          const commentId = deleteButton.dataset.commentId;
          // The imageId is needed for the endpoint and should be on the comment form
          const commentFormForImageId = myModalEl.querySelector('.comment-form');
          const imageId = commentFormForImageId ? commentFormForImageId.dataset.imageId : null;

          if (!commentId || !imageId) {
            // console.error('Missing commentId or imageId for delete operation.');
            return;
          }

          try {
            const response = await fetch(`/users/${projectUserId}/project/${projectId}/image/${imageId}/comment/${commentId}`, {
              method: 'DELETE',
              headers: {
                // Add any necessary headers, like CSRF token if your app uses them
                'Content-Type': 'application/json' 
              }
            });

            if (!response.ok) {
              const errorData = await response.json().catch(() => ({ message: 'Failed to parse error from server'}));
              throw new Error(errorData.message || 'Failed to delete comment from server');
            }

            // Successfully deleted from server
            if (commentItem) {
              commentItem.remove();
            }
            
            // Check if any comments are left
            const remainingCommentItems = commentsContainer.querySelectorAll('.comment-item');
            const commentsList = commentsContainer.querySelector('.comments-list');
            if (commentsList && remainingCommentItems.length === 0) {
              commentsList.innerHTML = '<p class="text-center secondary-text">No comments yet. Be the first to comment!</p>';
            }

            requestAnimationFrame(() => updateModalBodyHeightForContent(true)); // Update modal height

          } catch (error) {
            // console.error('Error deleting comment:', error);
          }
        });
      }

      function handlePageLoadImageHash() {
        const hash = window.location.hash;
        if (hash && hash.startsWith('#image-')) {
          const imageIdFromHash = hash.substring('#image-'.length);
          if (imageIdFromHash && carouselInstance && modalInstance) {
            const items = imageCarousel.querySelectorAll('.carousel-item');
            let imageIndex = -1;
            items.forEach((item, index) => {
              if (item.dataset.imageId === imageIdFromHash) {
                imageIndex = index;
              }
            });

            if (imageIndex !== -1) {
              // Store this index so shown.bs.modal knows it was from a direct link
              // This is important if the target is index 0, as slid.bs.carousel might not fire.
              g_clickedImageIndex = imageIndex; 
              carouselInstance.to(imageIndex); // Go to the slide
              modalInstance.show(); // Show the modal
            } else {
              // console.warn('Image ID from hash not found in carousel items:', imageIdFromHash);
            }
          } else {
            // console.log('No image ID in hash, or carousel/modal not ready.');
          }
        }
      }

      // Call the new function on DOMContentLoaded
      handlePageLoadImageHash();

    });