extends layout

block preload
  link(rel="preload", as="image", href="/images/Client\ Log\ In\ Photo-1.png")

block stylesheets
  
  link(rel='stylesheet', href='/stylesheets/projectDetail.css')

block content
  .project-background
    .dashboard
      if errMsg
        h1= title
        p.error-message= errMsg
      else if projectDetail
        .project-header
          h1.main-title-font= projectDetail.address
          if currentUser && currentUser.isAdmin
            div.project-button-container
              a#viewProject.button.header-button.project-button(href=`/users/${projectDetail.userId}/project/${projectDetail._id}/update`) 
                span#button-text Edit
                span#spinner-border.spinner-border.spinner-border-sm.d-none(role='status' aria-hidden='true')
              a.button.header-button.project-button.delete-button(href=`/users/${projectDetail.userId}/project/${projectDetail._id}/delete`)
                svg(xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none" stroke="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16" stroke-width="1")
                  path(d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z" stroke-linecap="round" stroke-linejoin="round")
          
          if moreThanOneProject
            a#viewProject.button.header-button.project-button(href=`/users/${projectDetail.userId}/projects/`) 
              span#button-text Back
              span#spinner-border.spinner-border.spinner-border-sm.d-none(role='status' aria-hidden='true')


        // DETAILS
        .project-details
          if currentUser.isAdmin
            .detail-item
              h2.dashboard-header Client 
              p.secondary-text= userName
            if lastLogin
              .detail-item
                h2.dashboard-header Last Login 
                p.secondary-text= new Date(lastLogin).toLocaleString('en-US', { weekday: 'long', month: 'long', day: '2-digit', hour: 'numeric', minute: 'numeric', hour12: true, timeZone: 'America/New_York' })
          
          .detail-item
            h2.dashboard-header Phase
            .phase-items
              p.secondary-text #{projectDetail.phaseName}
          
          .detail-item
            h2.dashboard-header Completion Rate
            .phase-items
              p.secondary-text #{projectDetail.currentPhase}%
              div.progress(role='progressbar', aria-label='Progress', aria-valuenow=projectDetail.currentPhase, aria-valuemin='0', aria-valuemax='100')
                div.progress-bar(style=`width: ${projectDetail.currentPhase}%`, aria-valuenow=projectDetail.currentPhase, aria-valuemin='0', aria-valuemax='100')


          if currentUser && currentUser.isAdmin
            .detail-item
              h2.dashboard-header Type
              p.secondary-text= projectDetail.type
        
        // CURRENT UPDATE
        .updates-container
          .detail-item
            .updates-header
              h2.dashboard-header Current Update 
              if currentUser.isAdmin && update === null
                a.button.header-button.project-button(href=`/users/${projectDetail.userId}/project/${projectDetail._id}/weekly-update/create`)
                  svg(xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16")
                    path(d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4")
              else if currentUser.isAdmin && update !== null || !currentUser.isAdmin && update !== null
                a.button.header-button.project-button(href=`/users/${projectDetail.userId}/project/${projectDetail._id}/weekly-updates`) View All
            if update !== null
              p.secondary-text.subtitle.project-detail-subtitle Week #{update.week} - #{update.title}
              if update.description
                each line in update.description
                  p.update-description.secondary-text= line
            else
              p.secondary-text No updates to see yet.

        // FILES
        .updates-container 
          .detail-item 
            .updates-header 
              h2.dashboard-header Files 
              if currentUser && currentUser.isAdmin && projectDetail && projectDetail._id
                a.button.header-button.project-button(href=`/users/${projectDetail.userId}/project/${projectDetail._id}/file/create`)
                  svg(xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16")
                    path(d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4")
            if files && files.length > 0
              each file in files 
                if file && file.cloudinaryUrl && file.filename
                  div
                    a.user-list.text-wrap(href=`${file.cloudinaryUrl}` target="_blank")= file.filename
                    |  
                    if currentUser && currentUser.isAdmin && projectDetail && projectDetail._id && file && file._id
                      form(action=`/users/${projectDetail.userId}/project/${projectDetail._id}/file/${file._id}/delete` method="POST" style="display: inline;")
                        button#viewProject.button.header-button.project-button.file-button.delete-button.image-delete(type="submit") 
                          svg(xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none" stroke="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16" stroke-width="1")
                            path(d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z" stroke-linecap="round" stroke-linejoin="round")
                          span#spinner-border.spinner-border.spinner-border-sm.d-none(role='status' aria-hidden='true')
            else
              p.secondary-text No files to see yet.

        // IMAGES
        if projectDetail.images && projectDetail.images.length > 0
          .detail-item
            .updates-header
              h2.dashboard-header Pictures
              if currentUser.isAdmin
                a.button.header-button.project-button.add-button(href=`/users/${projectDetail.userId}/project/${projectDetail._id}/images`)
                  svg(xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16")
                      path(d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4")
            .image-gallery
              .gallery-grid
                each image in projectDetail.images
                  div.image-container(id=`image-container-${image._id}`)
                    div.image-preview(type="button" data-bs-toggle="modal" data-bs-target="#exampleModal" data-image-url=image.url)
                      img.gallery-image(src=image.url alt="Project Image")
                      p.image-date #{image.createdAt.toLocaleDateString()}
                    if currentUser && currentUser.isAdmin
                      form.delete-image-button(action=`/users/${projectDetail.userId}/project/${projectDetail._id}/image/${image._id}/delete` method="POST")
                        button.button.header-button.project-button.file-button.delete-button.image-delete(type="submit")
                          svg(xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none" stroke="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16" stroke-width="1")
                            path(d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z" stroke-linecap="round" stroke-linejoin="round")

        else
          .detail-item
            .updates-header
                h2 Photos
                if currentUser.isAdmin
                  a.button.header-button.project-button(href=`/users/${projectDetail.userId}/project/${projectDetail._id}/images`)
                    svg(xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16")
                      path(d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4")
            p.secondary-text No images to see yet.

  if projectDetail.images && projectDetail.images.length > 0
    div#exampleModal.modal.fade(tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true")
      div.modal-dialog.modal-dialog-centered.modal-lg
        div.modal-content
          div.modal-header
            button.btn-close.btn-close-white(type="button" data-bs-dismiss="modal" aria-label="Close")
          div.modal-body.p-0
            div#imageCarousel.carousel.slide
              div.carousel-inner
                each image, index in projectDetail.images
                  div.carousel-item(class=index === 0 ? 'active' : '')
                    img.d-block.w-100(src=image.url alt="Project Image")
                    //- if image.createdAt
                    //-   div.carousel-caption
                    //-     p.image-date.mb-0 #{image.createdAt.toLocaleDateString()}
              button.carousel-control-prev(type="button" data-bs-target="#imageCarousel" data-bs-slide="prev")
                span.carousel-control-prev-icon.carousel-btn.bg-dark(aria-hidden="true")
                span.visually-hidden Previous
              button.carousel-control-next(type="button" data-bs-target="#imageCarousel" data-bs-slide="next")
                span.carousel-control-next-icon.carousel-btn.bg-dark(aria-hidden="true")
                span.visually-hidden Next

  script.
    document.addEventListener('DOMContentLoaded', function() {
      document.querySelectorAll('.delete-image-button').forEach(form => {
        form.addEventListener('submit', function(e) {
          e.preventDefault();
          const formAction = this.getAttribute('action');
          fetch(formAction, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
          })
          .then(response => response.json())
          .then(data => {
            if (data.message === 'Image deleted successfully') {
              // Find the parent image-container and remove it
              const imageContainer = this.closest('.image-container');
              if (imageContainer) {
                imageContainer.remove();
              }
            } else {
              throw new Error(data.message || 'Failed to delete the image');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('Failed to delete the image. Please try again.');
          });
        });
      });
    });

    document.addEventListener('DOMContentLoaded', function() {
      const modal = document.getElementById('exampleModal');
      const modalImage = document.getElementById('modalImage');
      const imagePreviews = document.querySelectorAll('.image-preview');
      
      imagePreviews.forEach(preview => {
        preview.addEventListener('click', function(event) {
          event.preventDefault(); // Prevent any default action
          const imageUrl = this.getAttribute('data-image-url');
          modalImage.src = imageUrl;
        });
      });

      modal.addEventListener('hidden.bs.modal', function () {
        modalImage.src = '';
      });

      // Prevent form submission from triggering modal
      const deleteForms = document.querySelectorAll('.delete-image-button');
      deleteForms.forEach(form => {
        form.addEventListener('click', function(event) {
          event.stopPropagation(); // Prevent event from bubbling up to parent elements
        });
      });
    });

    document.addEventListener('DOMContentLoaded', function() {
      const modal = document.getElementById('exampleModal');
      const carousel = document.getElementById('imageCarousel');
      const imagePreviews = document.querySelectorAll('.image-preview');
      
      // Initialize the carousel
      const carouselInstance = new bootstrap.Carousel(carousel, {
        interval: false // Disable auto-sliding
      });
      
      imagePreviews.forEach((preview, index) => {
        preview.addEventListener('click', function(event) {
          event.preventDefault();
          // Go to the clicked image in the carousel
          carouselInstance.to(index);
        });
      });

      // Reset carousel to first image when modal is closed
      modal.addEventListener('hidden.bs.modal', function () {
        carouselInstance.to(0);
      });
    });

    document.getElementById('viewProject').addEventListener('click', function(event) {
      const buttonText = document.getElementById('button-text');
      const spinner = document.getElementById('spinner-border');

      // Disable the button and show the spinner
      buttonText.classList.add('d-none');
      spinner.classList.remove('d-none');
    });

    window.addEventListener('pageshow', function(event) {
      const buttonText = document.getElementById('button-text');
      const spinner = document.getElementById('spinner-border');

      // Restore the button text and hide the spinner
      buttonText.classList.remove('d-none') // Set this to whatever the original text was
      spinner.classList.add('d-none');
    });

    document.addEventListener('DOMContentLoaded', function () {
      const myModalEl = document.getElementById('exampleModal');
      const imageCarousel = document.getElementById('imageCarousel');

      if (!myModalEl || !imageCarousel) {
        // console.error('Modal or Image Carousel element not found.');
        return;
      }

      const modalBody = myModalEl.querySelector('.modal-body');

      if (!modalBody) {
        // console.error('Modal body not found.');
        return;
      }

      let currentImageHeight = 0;
      const SCRIPT_ANIMATION_DURATION_CSS = 'height 0.35s ease-in-out'; // Match your CSS

      // Function to calculate the target height of an image
      function calculateImageDisplayHeight(imageElement, containerWidth) {
        if (!imageElement.complete || imageElement.naturalHeight === 0) {
          return 0;
        }
        const naturalWidth = imageElement.naturalWidth;
        const naturalHeight = imageElement.naturalHeight;
        const viewportHeight = window.innerHeight;
        const maxHeightConstraint = 0.70 * viewportHeight;

        let displayWidth = naturalWidth;
        let displayHeight = naturalHeight;

        if (naturalWidth > containerWidth) {
          displayWidth = containerWidth;
          displayHeight = (naturalHeight / naturalWidth) * displayWidth;
        }
        if (displayHeight > maxHeightConstraint) {
          displayHeight = maxHeightConstraint;
        }
        return displayHeight;
      }

      // Centralized function to set modal body height
      function setModalBodyHeight(newHeight, animate) {
        if (newHeight <= 0) return; // Don't set invalid or zero height

        const computedTransition = getComputedStyle(modalBody).transition;


        if (animate) {
          // Ensure transition is enabled for animation
          if (modalBody.style.transition === 'none' || !computedTransition.includes('height') || computedTransition.includes('0s')) {
            modalBody.style.transition = SCRIPT_ANIMATION_DURATION_CSS;
            requestAnimationFrame(() => {
              modalBody.style.height = newHeight + 'px';
            });
          } else {
            modalBody.style.height = newHeight + 'px';
          }
        } else {
          modalBody.style.transition = 'none';
          modalBody.style.height = newHeight + 'px';
          void modalBody.offsetHeight; // Force reflow to apply instant height change
          modalBody.style.transition = SCRIPT_ANIMATION_DURATION_CSS;
        }
        currentImageHeight = newHeight;
      }

      myModalEl.addEventListener('shown.bs.modal', function () {
        const activeImage = imageCarousel.querySelector('.carousel-item.active img');
        if (activeImage) {
          const setInitial = () => {
            const imageHeight = activeImage.offsetHeight;
            if (imageHeight > 0) {
              setModalBodyHeight(imageHeight, false);
            }
          };
          if (activeImage.complete && activeImage.naturalHeight > 0) setInitial();
          else activeImage.onload = setInitial;
        }
      });

      imageCarousel.addEventListener('slide.bs.carousel', function (event) {
        const nextImage = event.relatedTarget.querySelector('img');
        if (nextImage) {
          const prepareNext = () => {
            const containerWidth = modalBody.clientWidth;
            const nextCalcHeight = calculateImageDisplayHeight(nextImage, containerWidth);
            if (nextCalcHeight > 0) {
              setModalBodyHeight(nextCalcHeight, true);
            }
          };
          if (nextImage.complete && nextImage.naturalHeight > 0) prepareNext();
          else nextImage.onload = prepareNext;
        }
      });

      imageCarousel.addEventListener('slid.bs.carousel', function (event) {
        const activeImage = event.relatedTarget.querySelector('img');
        if (activeImage) {
          const finalize = () => {
            const renderedHeight = activeImage.offsetHeight;
            if (renderedHeight > 0 && renderedHeight !== currentImageHeight) {
              setModalBodyHeight(renderedHeight, true);
            } else if (renderedHeight > 0) {
                currentImageHeight = renderedHeight;
            }
            else if (activeImage.complete && activeImage.naturalHeight > 0) {
                const containerWidth = modalBody.clientWidth;
                const calculatedFallbackHeight = calculateImageDisplayHeight(activeImage, containerWidth);
                if (calculatedFallbackHeight > 0 && calculatedFallbackHeight !== currentImageHeight) {
                    setModalBodyHeight(calculatedFallbackHeight, true);
                } else if (calculatedFallbackHeight > 0) {
                    currentImageHeight = calculatedFallbackHeight;
                }
            }
          };
          if (activeImage.complete && activeImage.naturalHeight > 0) {
            requestAnimationFrame(finalize);
          }
          else activeImage.onload = () => requestAnimationFrame(finalize);
        }
      });

      window.addEventListener('resize', function () {
        if (myModalEl.classList.contains('show')) {
          const activeImage = imageCarousel.querySelector('.carousel-item.active img');
          if (activeImage && activeImage.complete && activeImage.naturalHeight > 0) {
            const containerWidth = modalBody.clientWidth;
            const newHeight = calculateImageDisplayHeight(activeImage, containerWidth);
            if (newHeight > 0) {
              setModalBodyHeight(newHeight, false);
            }
          }
        }
      });
    });